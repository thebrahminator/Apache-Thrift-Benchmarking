/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "trade_report_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace TradeReporting {


TradeReport::~TradeReport() noexcept {
}


void TradeReport::__set_symbol(const std::string& val) {
  this->symbol = val;
}

void TradeReport::__set_price(const double val) {
  this->price = val;
}

void TradeReport::__set_size(const int32_t val) {
  this->size = val;
}

void TradeReport::__set_seq_num(const int32_t val) {
  this->seq_num = val;
}
std::ostream& operator<<(std::ostream& out, const TradeReport& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TradeReport::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->symbol);
          this->__isset.symbol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->size);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->seq_num);
          this->__isset.seq_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TradeReport::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TradeReport");

  xfer += oprot->writeFieldBegin("symbol", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->symbol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->size);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("seq_num", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->seq_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TradeReport &a, TradeReport &b) {
  using ::std::swap;
  swap(a.symbol, b.symbol);
  swap(a.price, b.price);
  swap(a.size, b.size);
  swap(a.seq_num, b.seq_num);
  swap(a.__isset, b.__isset);
}

TradeReport::TradeReport(const TradeReport& other0) {
  symbol = other0.symbol;
  price = other0.price;
  size = other0.size;
  seq_num = other0.seq_num;
  __isset = other0.__isset;
}
TradeReport& TradeReport::operator=(const TradeReport& other1) {
  symbol = other1.symbol;
  price = other1.price;
  size = other1.size;
  seq_num = other1.seq_num;
  __isset = other1.__isset;
  return *this;
}
void TradeReport::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TradeReport(";
  out << "symbol=" << to_string(symbol);
  out << ", " << "price=" << to_string(price);
  out << ", " << "size=" << to_string(size);
  out << ", " << "seq_num=" << to_string(seq_num);
  out << ")";
}

} // namespace
