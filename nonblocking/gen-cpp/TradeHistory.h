/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TradeHistory_H
#define TradeHistory_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "trade_report_types.h"

namespace TradeReporting {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TradeHistoryIf {
 public:
  virtual ~TradeHistoryIf() {}
  virtual void get_last_sale(TradeReport& _return, const std::string& Symbol) = 0;
};

class TradeHistoryIfFactory {
 public:
  typedef TradeHistoryIf Handler;

  virtual ~TradeHistoryIfFactory() {}

  virtual TradeHistoryIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TradeHistoryIf* /* handler */) = 0;
};

class TradeHistoryIfSingletonFactory : virtual public TradeHistoryIfFactory {
 public:
  TradeHistoryIfSingletonFactory(const ::std::shared_ptr<TradeHistoryIf>& iface) : iface_(iface) {}
  virtual ~TradeHistoryIfSingletonFactory() {}

  virtual TradeHistoryIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TradeHistoryIf* /* handler */) {}

 protected:
  ::std::shared_ptr<TradeHistoryIf> iface_;
};

class TradeHistoryNull : virtual public TradeHistoryIf {
 public:
  virtual ~TradeHistoryNull() {}
  void get_last_sale(TradeReport& /* _return */, const std::string& /* Symbol */) {
    return;
  }
};

typedef struct _TradeHistory_get_last_sale_args__isset {
  _TradeHistory_get_last_sale_args__isset() : Symbol(false) {}
  bool Symbol :1;
} _TradeHistory_get_last_sale_args__isset;

class TradeHistory_get_last_sale_args {
 public:

  TradeHistory_get_last_sale_args(const TradeHistory_get_last_sale_args&);
  TradeHistory_get_last_sale_args& operator=(const TradeHistory_get_last_sale_args&);
  TradeHistory_get_last_sale_args() : Symbol() {
  }

  virtual ~TradeHistory_get_last_sale_args() noexcept;
  std::string Symbol;

  _TradeHistory_get_last_sale_args__isset __isset;

  void __set_Symbol(const std::string& val);

  bool operator == (const TradeHistory_get_last_sale_args & rhs) const
  {
    if (!(Symbol == rhs.Symbol))
      return false;
    return true;
  }
  bool operator != (const TradeHistory_get_last_sale_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHistory_get_last_sale_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHistory_get_last_sale_pargs {
 public:


  virtual ~TradeHistory_get_last_sale_pargs() noexcept;
  const std::string* Symbol;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHistory_get_last_sale_result__isset {
  _TradeHistory_get_last_sale_result__isset() : success(false) {}
  bool success :1;
} _TradeHistory_get_last_sale_result__isset;

class TradeHistory_get_last_sale_result {
 public:

  TradeHistory_get_last_sale_result(const TradeHistory_get_last_sale_result&);
  TradeHistory_get_last_sale_result& operator=(const TradeHistory_get_last_sale_result&);
  TradeHistory_get_last_sale_result() {
  }

  virtual ~TradeHistory_get_last_sale_result() noexcept;
  TradeReport success;

  _TradeHistory_get_last_sale_result__isset __isset;

  void __set_success(const TradeReport& val);

  bool operator == (const TradeHistory_get_last_sale_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TradeHistory_get_last_sale_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHistory_get_last_sale_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHistory_get_last_sale_presult__isset {
  _TradeHistory_get_last_sale_presult__isset() : success(false) {}
  bool success :1;
} _TradeHistory_get_last_sale_presult__isset;

class TradeHistory_get_last_sale_presult {
 public:


  virtual ~TradeHistory_get_last_sale_presult() noexcept;
  TradeReport* success;

  _TradeHistory_get_last_sale_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TradeHistoryClient : virtual public TradeHistoryIf {
 public:
  TradeHistoryClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TradeHistoryClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_last_sale(TradeReport& _return, const std::string& Symbol);
  void send_get_last_sale(const std::string& Symbol);
  void recv_get_last_sale(TradeReport& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TradeHistoryProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<TradeHistoryIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TradeHistoryProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_last_sale(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TradeHistoryProcessor(::std::shared_ptr<TradeHistoryIf> iface) :
    iface_(iface) {
    processMap_["get_last_sale"] = &TradeHistoryProcessor::process_get_last_sale;
  }

  virtual ~TradeHistoryProcessor() {}
};

class TradeHistoryProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TradeHistoryProcessorFactory(const ::std::shared_ptr< TradeHistoryIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< TradeHistoryIfFactory > handlerFactory_;
};

class TradeHistoryMultiface : virtual public TradeHistoryIf {
 public:
  TradeHistoryMultiface(std::vector<std::shared_ptr<TradeHistoryIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TradeHistoryMultiface() {}
 protected:
  std::vector<std::shared_ptr<TradeHistoryIf> > ifaces_;
  TradeHistoryMultiface() {}
  void add(::std::shared_ptr<TradeHistoryIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_last_sale(TradeReport& _return, const std::string& Symbol) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_last_sale(_return, Symbol);
    }
    ifaces_[i]->get_last_sale(_return, Symbol);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TradeHistoryConcurrentClient : virtual public TradeHistoryIf {
 public:
  TradeHistoryConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  TradeHistoryConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_last_sale(TradeReport& _return, const std::string& Symbol);
  int32_t send_get_last_sale(const std::string& Symbol);
  void recv_get_last_sale(TradeReport& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
