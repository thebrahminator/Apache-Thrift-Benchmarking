/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef trade_report_TYPES_H
#define trade_report_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace TradeReporting {

class TradeReport;

typedef struct _TradeReport__isset {
  _TradeReport__isset() : symbol(false), price(false), size(false), seq_num(false) {}
  bool symbol :1;
  bool price :1;
  bool size :1;
  bool seq_num :1;
} _TradeReport__isset;

class TradeReport : public virtual ::apache::thrift::TBase {
 public:

  TradeReport(const TradeReport&);
  TradeReport& operator=(const TradeReport&);
  TradeReport() : symbol(), price(0), size(0), seq_num(0) {
  }

  virtual ~TradeReport() noexcept;
  std::string symbol;
  double price;
  int32_t size;
  int32_t seq_num;

  _TradeReport__isset __isset;

  void __set_symbol(const std::string& val);

  void __set_price(const double val);

  void __set_size(const int32_t val);

  void __set_seq_num(const int32_t val);

  bool operator == (const TradeReport & rhs) const
  {
    if (!(symbol == rhs.symbol))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(size == rhs.size))
      return false;
    if (!(seq_num == rhs.seq_num))
      return false;
    return true;
  }
  bool operator != (const TradeReport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeReport & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TradeReport &a, TradeReport &b);

std::ostream& operator<<(std::ostream& out, const TradeReport& obj);

} // namespace

#endif
